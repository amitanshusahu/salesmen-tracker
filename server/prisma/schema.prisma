generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Manager {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  password         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  AssignSalesman   AssignSalesman[]
  ManagedLocations ManagedLocation[]
  User             SalesMan[]
}

model SalesMan {
  id               Int               @id @default(autoincrement())
  name             String
  uid              String            @unique
  phone            String?
  canLogin         Boolean           @default(true)
  salesManType     SalesManType
  managerId        Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  AssignSalesman   AssignSalesman[]
  Manager          Manager           @relation(fields: [managerId], references: [id], onDelete: Cascade)
  visitedLocations VisitedLocation[]
}

model ManagedLocation {
  id              Int               @id @default(autoincrement())
  name            String
  market_name     String
  address         String
  latitude        Float
  longitude       Float
  region          String
  state           String
  storeType       StoreType
  managerId       Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  AssignSalesman  AssignSalesman[]
  Manager         Manager           @relation(fields: [managerId], references: [id], onDelete: Cascade)
  VisitedLocation VisitedLocation[]
}

model VisitedLocation {
  id            Int             @id @default(autoincrement())
  date          DateTime
  locationId    Int
  UserLatitude  Float
  UserLongitude Float
  scanDistance  Float
  visitCount    Int             @default(0)
  salesManId    Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Location      ManagedLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)
  SalesMan      SalesMan        @relation(fields: [salesManId], references: [id], onDelete: Cascade)
}

model AssignSalesman {
  id         Int             @id @default(autoincrement())
  managerId  Int
  salesManId Int
  locationId Int
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  Location   ManagedLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)
  Manager    Manager         @relation(fields: [managerId], references: [id], onDelete: Cascade)
  SalesMan   SalesMan        @relation(fields: [salesManId], references: [id], onDelete: Cascade)
}

enum SalesManType {
  VANSALES
  PRESELLER
  MERCHANDISER
  DILIVERY
  CITYHEAD    @map("CITY HEAD")
  SUPERVISOR
}

enum StoreType {
  RETAILER
  DISTRIBUTOR
  WHOLESALER
  MEGA    @map("MEGA SUB")
  SUB
}
